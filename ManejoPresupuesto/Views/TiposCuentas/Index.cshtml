@model IEnumerable<TipoCuenta>
@{
    ViewData["Title"] = "Tipos de cuentas";
}
<h1>Tipos de cuentas</h1>
<h5>Tipo de cuenta se refiere a cómo podemos agrupar cuentas. Ejemplo: Préstamos, tarjetas de crédito, etc</h5>

<a asp-action="Crear" class="btn btn-primary mb-3">Crear nuevo</a>

<table class="table">
    <thead>
        <tr>
            <th>Acciones</th>
            <th>Nombre</th>
        </tr>
    </thead>
    <tbody id="reordenable">
        @foreach (var tipoCuenta in Model)
        {
            <tr>
                <td>
                    <input type="hidden" name="tipoCuentaId" class="ids" value="@tipoCuenta.Id" />
                    <a asp-action="Editar" asp-action="Editar" asp-route-id="@tipoCuenta.Id" class="btn btn-primary">Editar</a>
                    <a asp-action="Eliminar" asp-route-id="@tipoCuenta.Id"  class="btn btn-danger">Eliminar</a>
                </td>
                <td>@tipoCuenta.Nombre</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        const urlOrdenar = '@Url.Action("Ordenar", "TipoCuenta")';

        $(function(){
            $("#reordenable").sortable({
                stop: async function(e, ui){
                    await actualizarOrdenes();
                }
            });
            async function actualizarOrdenes(){
                const ids = obtenerIdsDeElementos();
                await enviarIdsAlBackend(ids);
            }
            function obtenerIdsDeElementos(){
                const ids = $(".ids").map(function(){
                    return $(this).val();
                }).get();
                return ids;
            }
            async function  enviarIdsAlBackend(ids){
                var data = JSON.stringify(ids);
                await fetch(urlOrdenar, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: data
                });

            }
        })
    </script>
}